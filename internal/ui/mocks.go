// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ui

import (
	"context"
	"sync"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUI creates a new instance of MockUI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUI {
	mock := &MockUI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUI is an autogenerated mock type for the UI type
type MockUI struct {
	mock.Mock
}

type MockUI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUI) EXPECT() *MockUI_Expecter {
	return &MockUI_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockUI
func (_mock *MockUI) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUI_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockUI_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockUI_Expecter) Close() *MockUI_Close_Call {
	return &MockUI_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockUI_Close_Call) Run(run func()) *MockUI_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUI_Close_Call) Return(err error) *MockUI_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUI_Close_Call) RunAndReturn(run func() error) *MockUI_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockUI
func (_mock *MockUI) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUI_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockUI_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockUI_Expecter) Init() *MockUI_Init_Call {
	return &MockUI_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockUI_Init_Call) Run(run func()) *MockUI_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUI_Init_Call) Return(err error) *MockUI_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUI_Init_Call) RunAndReturn(run func() error) *MockUI_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockUI
func (_mock *MockUI) Run(ctx context.Context, wg *sync.WaitGroup) error {
	ret := _mock.Called(ctx, wg)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sync.WaitGroup) error); ok {
		r0 = returnFunc(ctx, wg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUI_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockUI_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
func (_e *MockUI_Expecter) Run(ctx interface{}, wg interface{}) *MockUI_Run_Call {
	return &MockUI_Run_Call{Call: _e.mock.On("Run", ctx, wg)}
}

func (_c *MockUI_Run_Call) Run(run func(ctx context.Context, wg *sync.WaitGroup)) *MockUI_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sync.WaitGroup
		if args[1] != nil {
			arg1 = args[1].(*sync.WaitGroup)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUI_Run_Call) Return(err error) *MockUI_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUI_Run_Call) RunAndReturn(run func(ctx context.Context, wg *sync.WaitGroup) error) *MockUI_Run_Call {
	_c.Call.Return(run)
	return _c
}
