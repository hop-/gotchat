// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package core

import (
	"context"
	"sync"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockCommand
func (_mock *MockCommand) Execute(ctx context.Context) ([]Event, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]Event, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []Event); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCommand_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommand_Expecter) Execute(ctx interface{}) *MockCommand_Execute_Call {
	return &MockCommand_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockCommand_Execute_Call) Run(run func(ctx context.Context)) *MockCommand_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_Execute_Call) Return(events []Event, err error) *MockCommand_Execute_Call {
	_c.Call.Return(events, err)
	return _c
}

func (_c *MockCommand_Execute_Call) RunAndReturn(run func(ctx context.Context) ([]Event, error)) *MockCommand_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEntity creates a new instance of MockEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntity {
	mock := &MockEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntity is an autogenerated mock type for the Entity type
type MockEntity struct {
	mock.Mock
}

type MockEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntity) EXPECT() *MockEntity_Expecter {
	return &MockEntity_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function for the type MockEntity
func (_mock *MockEntity) GetId() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockEntity_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockEntity_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *MockEntity_Expecter) GetId() *MockEntity_GetId_Call {
	return &MockEntity_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *MockEntity_GetId_Call) Run(run func()) *MockEntity_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_GetId_Call) Return(n int) *MockEntity_GetId_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockEntity_GetId_Call) RunAndReturn(run func() int) *MockEntity_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventDispatcher creates a new instance of MockEventDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventDispatcher {
	mock := &MockEventDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventDispatcher is an autogenerated mock type for the EventDispatcher type
type MockEventDispatcher struct {
	mock.Mock
}

type MockEventDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventDispatcher) EXPECT() *MockEventDispatcher_Expecter {
	return &MockEventDispatcher_Expecter{mock: &_m.Mock}
}

// Emit provides a mock function for the type MockEventDispatcher
func (_mock *MockEventDispatcher) Emit(event Event) {
	_mock.Called(event)
	return
}

// MockEventDispatcher_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type MockEventDispatcher_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - event Event
func (_e *MockEventDispatcher_Expecter) Emit(event interface{}) *MockEventDispatcher_Emit_Call {
	return &MockEventDispatcher_Emit_Call{Call: _e.mock.On("Emit", event)}
}

func (_c *MockEventDispatcher_Emit_Call) Run(run func(event Event)) *MockEventDispatcher_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Event
		if args[0] != nil {
			arg0 = args[0].(Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventDispatcher_Emit_Call) Return() *MockEventDispatcher_Emit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventDispatcher_Emit_Call) RunAndReturn(run func(event Event)) *MockEventDispatcher_Emit_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function for the type MockEventDispatcher
func (_mock *MockEventDispatcher) Register(ctx context.Context) EventListener {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 EventListener
	if returnFunc, ok := ret.Get(0).(func(context.Context) EventListener); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventListener)
		}
	}
	return r0
}

// MockEventDispatcher_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockEventDispatcher_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventDispatcher_Expecter) Register(ctx interface{}) *MockEventDispatcher_Register_Call {
	return &MockEventDispatcher_Register_Call{Call: _e.mock.On("Register", ctx)}
}

func (_c *MockEventDispatcher_Register_Call) Run(run func(ctx context.Context)) *MockEventDispatcher_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventDispatcher_Register_Call) Return(eventListener EventListener) *MockEventDispatcher_Register_Call {
	_c.Call.Return(eventListener)
	return _c
}

func (_c *MockEventDispatcher_Register_Call) RunAndReturn(run func(ctx context.Context) EventListener) *MockEventDispatcher_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function for the type MockEventDispatcher
func (_mock *MockEventDispatcher) Unregister(eventListener EventListener) {
	_mock.Called(eventListener)
	return
}

// MockEventDispatcher_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type MockEventDispatcher_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - eventListener EventListener
func (_e *MockEventDispatcher_Expecter) Unregister(eventListener interface{}) *MockEventDispatcher_Unregister_Call {
	return &MockEventDispatcher_Unregister_Call{Call: _e.mock.On("Unregister", eventListener)}
}

func (_c *MockEventDispatcher_Unregister_Call) Run(run func(eventListener EventListener)) *MockEventDispatcher_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 EventListener
		if args[0] != nil {
			arg0 = args[0].(EventListener)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventDispatcher_Unregister_Call) Return() *MockEventDispatcher_Unregister_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventDispatcher_Unregister_Call) RunAndReturn(run func(eventListener EventListener)) *MockEventDispatcher_Unregister_Call {
	_c.Run(run)
	return _c
}

// NewMockEventEmitter creates a new instance of MockEventEmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventEmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventEmitter {
	mock := &MockEventEmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventEmitter is an autogenerated mock type for the EventEmitter type
type MockEventEmitter struct {
	mock.Mock
}

type MockEventEmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventEmitter) EXPECT() *MockEventEmitter_Expecter {
	return &MockEventEmitter_Expecter{mock: &_m.Mock}
}

// Emit provides a mock function for the type MockEventEmitter
func (_mock *MockEventEmitter) Emit(event Event) {
	_mock.Called(event)
	return
}

// MockEventEmitter_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type MockEventEmitter_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - event Event
func (_e *MockEventEmitter_Expecter) Emit(event interface{}) *MockEventEmitter_Emit_Call {
	return &MockEventEmitter_Emit_Call{Call: _e.mock.On("Emit", event)}
}

func (_c *MockEventEmitter_Emit_Call) Run(run func(event Event)) *MockEventEmitter_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Event
		if args[0] != nil {
			arg0 = args[0].(Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventEmitter_Emit_Call) Return() *MockEventEmitter_Emit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventEmitter_Emit_Call) RunAndReturn(run func(event Event)) *MockEventEmitter_Emit_Call {
	_c.Run(run)
	return _c
}

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository[T Entity](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository[T] {
	mock := &MockRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository[T Entity] struct {
	mock.Mock
}

type MockRepository_Expecter[T Entity] struct {
	mock *mock.Mock
}

func (_m *MockRepository[T]) EXPECT() *MockRepository_Expecter[T] {
	return &MockRepository_Expecter[T]{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) Create(entity *T) error {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*T) error); ok {
		r0 = returnFunc(entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call[T Entity] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - entity *T
func (_e *MockRepository_Expecter[T]) Create(entity interface{}) *MockRepository_Create_Call[T] {
	return &MockRepository_Create_Call[T]{Call: _e.mock.On("Create", entity)}
}

func (_c *MockRepository_Create_Call[T]) Run(run func(entity *T)) *MockRepository_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *T
		if args[0] != nil {
			arg0 = args[0].(*T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call[T]) Return(err error) *MockRepository_Create_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Create_Call[T]) RunAndReturn(run func(entity *T) error) *MockRepository_Create_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) Delete(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call[T Entity] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter[T]) Delete(id interface{}) *MockRepository_Delete_Call[T] {
	return &MockRepository_Delete_Call[T]{Call: _e.mock.On("Delete", id)}
}

func (_c *MockRepository_Delete_Call[T]) Run(run func(id int)) *MockRepository_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call[T]) Return(err error) *MockRepository_Delete_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call[T]) RunAndReturn(run func(id int) error) *MockRepository_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) GetAll() ([]*T, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*T, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRepository_GetAll_Call[T Entity] struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockRepository_Expecter[T]) GetAll() *MockRepository_GetAll_Call[T] {
	return &MockRepository_GetAll_Call[T]{Call: _e.mock.On("GetAll")}
}

func (_c *MockRepository_GetAll_Call[T]) Run(run func()) *MockRepository_GetAll_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_GetAll_Call[T]) Return(vs []*T, err error) *MockRepository_GetAll_Call[T] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockRepository_GetAll_Call[T]) RunAndReturn(run func() ([]*T, error)) *MockRepository_GetAll_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetAllBy provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) GetAllBy(field string, value any) ([]*T, error) {
	ret := _mock.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBy")
	}

	var r0 []*T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, any) ([]*T, error)); ok {
		return returnFunc(field, value)
	}
	if returnFunc, ok := ret.Get(0).(func(string, any) []*T); ok {
		r0 = returnFunc(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, any) error); ok {
		r1 = returnFunc(field, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAllBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBy'
type MockRepository_GetAllBy_Call[T Entity] struct {
	*mock.Call
}

// GetAllBy is a helper method to define mock.On call
//   - field string
//   - value any
func (_e *MockRepository_Expecter[T]) GetAllBy(field interface{}, value interface{}) *MockRepository_GetAllBy_Call[T] {
	return &MockRepository_GetAllBy_Call[T]{Call: _e.mock.On("GetAllBy", field, value)}
}

func (_c *MockRepository_GetAllBy_Call[T]) Run(run func(field string, value any)) *MockRepository_GetAllBy_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetAllBy_Call[T]) Return(vs []*T, err error) *MockRepository_GetAllBy_Call[T] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockRepository_GetAllBy_Call[T]) RunAndReturn(run func(field string, value any) ([]*T, error)) *MockRepository_GetAllBy_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetOne provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) GetOne(id int) (*T, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (*T, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) *T); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOne'
type MockRepository_GetOne_Call[T Entity] struct {
	*mock.Call
}

// GetOne is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter[T]) GetOne(id interface{}) *MockRepository_GetOne_Call[T] {
	return &MockRepository_GetOne_Call[T]{Call: _e.mock.On("GetOne", id)}
}

func (_c *MockRepository_GetOne_Call[T]) Run(run func(id int)) *MockRepository_GetOne_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetOne_Call[T]) Return(v *T, err error) *MockRepository_GetOne_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_GetOne_Call[T]) RunAndReturn(run func(id int) (*T, error)) *MockRepository_GetOne_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetOneBy provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) GetOneBy(field string, value any) (*T, error) {
	ret := _mock.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for GetOneBy")
	}

	var r0 *T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, any) (*T, error)); ok {
		return returnFunc(field, value)
	}
	if returnFunc, ok := ret.Get(0).(func(string, any) *T); ok {
		r0 = returnFunc(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, any) error); ok {
		r1 = returnFunc(field, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOneBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneBy'
type MockRepository_GetOneBy_Call[T Entity] struct {
	*mock.Call
}

// GetOneBy is a helper method to define mock.On call
//   - field string
//   - value any
func (_e *MockRepository_Expecter[T]) GetOneBy(field interface{}, value interface{}) *MockRepository_GetOneBy_Call[T] {
	return &MockRepository_GetOneBy_Call[T]{Call: _e.mock.On("GetOneBy", field, value)}
}

func (_c *MockRepository_GetOneBy_Call[T]) Run(run func(field string, value any)) *MockRepository_GetOneBy_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetOneBy_Call[T]) Return(v *T, err error) *MockRepository_GetOneBy_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_GetOneBy_Call[T]) RunAndReturn(run func(field string, value any) (*T, error)) *MockRepository_GetOneBy_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository[T]) Update(entity *T) error {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*T) error); ok {
		r0 = returnFunc(entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call[T Entity] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - entity *T
func (_e *MockRepository_Expecter[T]) Update(entity interface{}) *MockRepository_Update_Call[T] {
	return &MockRepository_Update_Call[T]{Call: _e.mock.On("Update", entity)}
}

func (_c *MockRepository_Update_Call[T]) Run(run func(entity *T)) *MockRepository_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *T
		if args[0] != nil {
			arg0 = args[0].(*T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Update_Call[T]) Return(err error) *MockRepository_Update_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Update_Call[T]) RunAndReturn(run func(entity *T) error) *MockRepository_Update_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockService
func (_mock *MockService) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockService_Expecter) Close() *MockService_Close_Call {
	return &MockService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockService_Close_Call) Run(run func()) *MockService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Close_Call) Return(err error) *MockService_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Close_Call) RunAndReturn(run func() error) *MockService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockService
func (_mock *MockService) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockService_Expecter) Init() *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockService_Init_Call) Run(run func()) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func() error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// MapEventToCommands provides a mock function for the type MockService
func (_mock *MockService) MapEventToCommands(event Event) []Command {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for MapEventToCommands")
	}

	var r0 []Command
	if returnFunc, ok := ret.Get(0).(func(Event) []Command); ok {
		r0 = returnFunc(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Command)
		}
	}
	return r0
}

// MockService_MapEventToCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapEventToCommands'
type MockService_MapEventToCommands_Call struct {
	*mock.Call
}

// MapEventToCommands is a helper method to define mock.On call
//   - event Event
func (_e *MockService_Expecter) MapEventToCommands(event interface{}) *MockService_MapEventToCommands_Call {
	return &MockService_MapEventToCommands_Call{Call: _e.mock.On("MapEventToCommands", event)}
}

func (_c *MockService_MapEventToCommands_Call) Run(run func(event Event)) *MockService_MapEventToCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Event
		if args[0] != nil {
			arg0 = args[0].(Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_MapEventToCommands_Call) Return(commands []Command) *MockService_MapEventToCommands_Call {
	_c.Call.Return(commands)
	return _c
}

func (_c *MockService_MapEventToCommands_Call) RunAndReturn(run func(event Event) []Command) *MockService_MapEventToCommands_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockService
func (_mock *MockService) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(s string) *MockService_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockService
func (_mock *MockService) Run(ctx context.Context, wg *sync.WaitGroup) {
	_mock.Called(ctx, wg)
	return
}

// MockService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
func (_e *MockService_Expecter) Run(ctx interface{}, wg interface{}) *MockService_Run_Call {
	return &MockService_Run_Call{Call: _e.mock.On("Run", ctx, wg)}
}

func (_c *MockService_Run_Call) Run(run func(ctx context.Context, wg *sync.WaitGroup)) *MockService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sync.WaitGroup
		if args[1] != nil {
			arg1 = args[1].(*sync.WaitGroup)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_Run_Call) Return() *MockService_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_Run_Call) RunAndReturn(run func(ctx context.Context, wg *sync.WaitGroup)) *MockService_Run_Call {
	_c.Run(run)
	return _c
}

// NewMockServiceDispatcher creates a new instance of MockServiceDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceDispatcher {
	mock := &MockServiceDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceDispatcher is an autogenerated mock type for the ServiceDispatcher type
type MockServiceDispatcher struct {
	mock.Mock
}

type MockServiceDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceDispatcher) EXPECT() *MockServiceDispatcher_Expecter {
	return &MockServiceDispatcher_Expecter{mock: &_m.Mock}
}

// CloseAll provides a mock function for the type MockServiceDispatcher
func (_mock *MockServiceDispatcher) CloseAll() []error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseAll")
	}

	var r0 []error
	if returnFunc, ok := ret.Get(0).(func() []error); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}
	return r0
}

// MockServiceDispatcher_CloseAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAll'
type MockServiceDispatcher_CloseAll_Call struct {
	*mock.Call
}

// CloseAll is a helper method to define mock.On call
func (_e *MockServiceDispatcher_Expecter) CloseAll() *MockServiceDispatcher_CloseAll_Call {
	return &MockServiceDispatcher_CloseAll_Call{Call: _e.mock.On("CloseAll")}
}

func (_c *MockServiceDispatcher_CloseAll_Call) Run(run func()) *MockServiceDispatcher_CloseAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceDispatcher_CloseAll_Call) Return(errs []error) *MockServiceDispatcher_CloseAll_Call {
	_c.Call.Return(errs)
	return _c
}

func (_c *MockServiceDispatcher_CloseAll_Call) RunAndReturn(run func() []error) *MockServiceDispatcher_CloseAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockServiceDispatcher
func (_mock *MockServiceDispatcher) GetAll() []Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []Service
	if returnFunc, ok := ret.Get(0).(func() []Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Service)
		}
	}
	return r0
}

// MockServiceDispatcher_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockServiceDispatcher_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockServiceDispatcher_Expecter) GetAll() *MockServiceDispatcher_GetAll_Call {
	return &MockServiceDispatcher_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockServiceDispatcher_GetAll_Call) Run(run func()) *MockServiceDispatcher_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceDispatcher_GetAll_Call) Return(services []Service) *MockServiceDispatcher_GetAll_Call {
	_c.Call.Return(services)
	return _c
}

func (_c *MockServiceDispatcher_GetAll_Call) RunAndReturn(run func() []Service) *MockServiceDispatcher_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// InitAll provides a mock function for the type MockServiceDispatcher
func (_mock *MockServiceDispatcher) InitAll() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceDispatcher_InitAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitAll'
type MockServiceDispatcher_InitAll_Call struct {
	*mock.Call
}

// InitAll is a helper method to define mock.On call
func (_e *MockServiceDispatcher_Expecter) InitAll() *MockServiceDispatcher_InitAll_Call {
	return &MockServiceDispatcher_InitAll_Call{Call: _e.mock.On("InitAll")}
}

func (_c *MockServiceDispatcher_InitAll_Call) Run(run func()) *MockServiceDispatcher_InitAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceDispatcher_InitAll_Call) Return(err error) *MockServiceDispatcher_InitAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceDispatcher_InitAll_Call) RunAndReturn(run func() error) *MockServiceDispatcher_InitAll_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockServiceDispatcher
func (_mock *MockServiceDispatcher) Register(s Service) {
	_mock.Called(s)
	return
}

// MockServiceDispatcher_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockServiceDispatcher_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - s Service
func (_e *MockServiceDispatcher_Expecter) Register(s interface{}) *MockServiceDispatcher_Register_Call {
	return &MockServiceDispatcher_Register_Call{Call: _e.mock.On("Register", s)}
}

func (_c *MockServiceDispatcher_Register_Call) Run(run func(s Service)) *MockServiceDispatcher_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Service
		if args[0] != nil {
			arg0 = args[0].(Service)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceDispatcher_Register_Call) Return() *MockServiceDispatcher_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceDispatcher_Register_Call) RunAndReturn(run func(s Service)) *MockServiceDispatcher_Register_Call {
	_c.Run(run)
	return _c
}

// RunAll provides a mock function for the type MockServiceDispatcher
func (_mock *MockServiceDispatcher) RunAll(ctx context.Context, wg *sync.WaitGroup) error {
	ret := _mock.Called(ctx, wg)

	if len(ret) == 0 {
		panic("no return value specified for RunAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sync.WaitGroup) error); ok {
		r0 = returnFunc(ctx, wg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceDispatcher_RunAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunAll'
type MockServiceDispatcher_RunAll_Call struct {
	*mock.Call
}

// RunAll is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
func (_e *MockServiceDispatcher_Expecter) RunAll(ctx interface{}, wg interface{}) *MockServiceDispatcher_RunAll_Call {
	return &MockServiceDispatcher_RunAll_Call{Call: _e.mock.On("RunAll", ctx, wg)}
}

func (_c *MockServiceDispatcher_RunAll_Call) Run(run func(ctx context.Context, wg *sync.WaitGroup)) *MockServiceDispatcher_RunAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sync.WaitGroup
		if args[1] != nil {
			arg1 = args[1].(*sync.WaitGroup)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceDispatcher_RunAll_Call) Return(err error) *MockServiceDispatcher_RunAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceDispatcher_RunAll_Call) RunAndReturn(run func(ctx context.Context, wg *sync.WaitGroup) error) *MockServiceDispatcher_RunAll_Call {
	_c.Call.Return(run)
	return _c
}
