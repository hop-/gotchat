// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package network

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockBasicConn creates a new instance of MockBasicConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasicConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasicConn {
	mock := &MockBasicConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBasicConn is an autogenerated mock type for the BasicConn type
type MockBasicConn struct {
	mock.Mock
}

type MockBasicConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicConn) EXPECT() *MockBasicConn_Expecter {
	return &MockBasicConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockBasicConn
func (_mock *MockBasicConn) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBasicConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBasicConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBasicConn_Expecter) Close() *MockBasicConn_Close_Call {
	return &MockBasicConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBasicConn_Close_Call) Run(run func()) *MockBasicConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBasicConn_Close_Call) Return(err error) *MockBasicConn_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBasicConn_Close_Call) RunAndReturn(run func() error) *MockBasicConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockBasicConn
func (_mock *MockBasicConn) Read(b []byte) (int, error) {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(b)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBasicConn_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockBasicConn_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - b []byte
func (_e *MockBasicConn_Expecter) Read(b interface{}) *MockBasicConn_Read_Call {
	return &MockBasicConn_Read_Call{Call: _e.mock.On("Read", b)}
}

func (_c *MockBasicConn_Read_Call) Run(run func(b []byte)) *MockBasicConn_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBasicConn_Read_Call) Return(n int, err error) *MockBasicConn_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockBasicConn_Read_Call) RunAndReturn(run func(b []byte) (int, error)) *MockBasicConn_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockBasicConn
func (_mock *MockBasicConn) Write(b []byte) (int, error) {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(b)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBasicConn_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockBasicConn_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - b []byte
func (_e *MockBasicConn_Expecter) Write(b interface{}) *MockBasicConn_Write_Call {
	return &MockBasicConn_Write_Call{Call: _e.mock.On("Write", b)}
}

func (_c *MockBasicConn_Write_Call) Run(run func(b []byte)) *MockBasicConn_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBasicConn_Write_Call) Return(n int, err error) *MockBasicConn_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockBasicConn_Write_Call) RunAndReturn(run func(b []byte) (int, error)) *MockBasicConn_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBasicListener creates a new instance of MockBasicListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasicListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasicListener {
	mock := &MockBasicListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBasicListener is an autogenerated mock type for the BasicListener type
type MockBasicListener struct {
	mock.Mock
}

type MockBasicListener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicListener) EXPECT() *MockBasicListener_Expecter {
	return &MockBasicListener_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function for the type MockBasicListener
func (_mock *MockBasicListener) Accept() (BasicConn, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 BasicConn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (BasicConn, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() BasicConn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BasicConn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBasicListener_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type MockBasicListener_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
func (_e *MockBasicListener_Expecter) Accept() *MockBasicListener_Accept_Call {
	return &MockBasicListener_Accept_Call{Call: _e.mock.On("Accept")}
}

func (_c *MockBasicListener_Accept_Call) Run(run func()) *MockBasicListener_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBasicListener_Accept_Call) Return(basicConn BasicConn, err error) *MockBasicListener_Accept_Call {
	_c.Call.Return(basicConn, err)
	return _c
}

func (_c *MockBasicListener_Accept_Call) RunAndReturn(run func() (BasicConn, error)) *MockBasicListener_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockBasicListener
func (_mock *MockBasicListener) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBasicListener_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBasicListener_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBasicListener_Expecter) Close() *MockBasicListener_Close_Call {
	return &MockBasicListener_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBasicListener_Close_Call) Run(run func()) *MockBasicListener_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBasicListener_Close_Call) Return(err error) *MockBasicListener_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBasicListener_Close_Call) RunAndReturn(run func() error) *MockBasicListener_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecureComponent creates a new instance of MockSecureComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecureComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecureComponent {
	mock := &MockSecureComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecureComponent is an autogenerated mock type for the SecureComponent type
type MockSecureComponent struct {
	mock.Mock
}

type MockSecureComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecureComponent) EXPECT() *MockSecureComponent_Expecter {
	return &MockSecureComponent_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function for the type MockSecureComponent
func (_mock *MockSecureComponent) Decrypt(data []byte) ([]byte, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecureComponent_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockSecureComponent_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - data []byte
func (_e *MockSecureComponent_Expecter) Decrypt(data interface{}) *MockSecureComponent_Decrypt_Call {
	return &MockSecureComponent_Decrypt_Call{Call: _e.mock.On("Decrypt", data)}
}

func (_c *MockSecureComponent_Decrypt_Call) Run(run func(data []byte)) *MockSecureComponent_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecureComponent_Decrypt_Call) Return(bytes []byte, err error) *MockSecureComponent_Decrypt_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSecureComponent_Decrypt_Call) RunAndReturn(run func(data []byte) ([]byte, error)) *MockSecureComponent_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockSecureComponent
func (_mock *MockSecureComponent) Encrypt(data []byte) ([]byte, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecureComponent_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockSecureComponent_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - data []byte
func (_e *MockSecureComponent_Expecter) Encrypt(data interface{}) *MockSecureComponent_Encrypt_Call {
	return &MockSecureComponent_Encrypt_Call{Call: _e.mock.On("Encrypt", data)}
}

func (_c *MockSecureComponent_Encrypt_Call) Run(run func(data []byte)) *MockSecureComponent_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecureComponent_Encrypt_Call) Return(bytes []byte, err error) *MockSecureComponent_Encrypt_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSecureComponent_Encrypt_Call) RunAndReturn(run func(data []byte) ([]byte, error)) *MockSecureComponent_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransport creates a new instance of MockTransport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransport {
	mock := &MockTransport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransport is an autogenerated mock type for the Transport type
type MockTransport struct {
	mock.Mock
}

type MockTransport_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransport) EXPECT() *MockTransport_Expecter {
	return &MockTransport_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockTransport
func (_mock *MockTransport) Connect(address string) (*Conn, error) {
	ret := _mock.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 *Conn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Conn, error)); ok {
		return returnFunc(address)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Conn); ok {
		r0 = returnFunc(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Conn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(address)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransport_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockTransport_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - address string
func (_e *MockTransport_Expecter) Connect(address interface{}) *MockTransport_Connect_Call {
	return &MockTransport_Connect_Call{Call: _e.mock.On("Connect", address)}
}

func (_c *MockTransport_Connect_Call) Run(run func(address string)) *MockTransport_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransport_Connect_Call) Return(conn *Conn, err error) *MockTransport_Connect_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *MockTransport_Connect_Call) RunAndReturn(run func(address string) (*Conn, error)) *MockTransport_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Listen provides a mock function for the type MockTransport
func (_mock *MockTransport) Listen(address string) (*Listener, error) {
	ret := _mock.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 *Listener
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Listener, error)); ok {
		return returnFunc(address)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Listener); ok {
		r0 = returnFunc(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Listener)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(address)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransport_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockTransport_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - address string
func (_e *MockTransport_Expecter) Listen(address interface{}) *MockTransport_Listen_Call {
	return &MockTransport_Listen_Call{Call: _e.mock.On("Listen", address)}
}

func (_c *MockTransport_Listen_Call) Run(run func(address string)) *MockTransport_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransport_Listen_Call) Return(listener *Listener, err error) *MockTransport_Listen_Call {
	_c.Call.Return(listener, err)
	return _c
}

func (_c *MockTransport_Listen_Call) RunAndReturn(run func(address string) (*Listener, error)) *MockTransport_Listen_Call {
	_c.Call.Return(run)
	return _c
}
